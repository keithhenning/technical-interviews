class TrieNode {
   // Map from character to TrieNode
   Map<Character, TrieNode> children;
   boolean isEnd;
   
   public TrieNode() {
       this.children = new HashMap<>();
       this.isEnd = false;
   }
}

class Trie {
   private TrieNode root;
   
   public Trie() {
       this.root = new TrieNode();
   }
   
   public void insert(String word) {
       TrieNode current = root;
       
       for (char c : word.toCharArray()) {
           if (!current.children.containsKey(c)) {
               current.children.put(c, new TrieNode());
           }
           current = current.children.get(c);
       }
       
       current.isEnd = true;
   }
   
   public boolean search(String word) {
       TrieNode node = searchPrefix(word);
       return node != null && node.isEnd;
   }
   
   public boolean startsWith(String prefix) {
       return searchPrefix(prefix) != null;
   }
   
   private TrieNode searchPrefix(String prefix) {
       TrieNode current = root;
       
       for (char c : prefix.toCharArray()) {
           if (!current.children.containsKey(c)) {
               return null;
           }
           current = current.children.get(c);
       }
       
       return current;
   }
}