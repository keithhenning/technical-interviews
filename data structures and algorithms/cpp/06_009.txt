struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class BinaryTree {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> result;
        inorderHelper(root, result);
        return result;
    }
    
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> result;
        preorderHelper(root, result);
        return result;
    }
    
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> result;
        postorderHelper(root, result);
        return result;
    }
    
private:
    void inorderHelper(TreeNode* node, vector<int>& result) {
        if (node) {
            inorderHelper(node->left, result);
            result.push_back(node->val);
            inorderHelper(node->right, result);
        }
    }
    
    void preorderHelper(TreeNode* node, vector<int>& result) {
        if (node) {
            result.push_back(node->val);
            preorderHelper(node->left, result);
            preorderHelper(node->right, result);
        }
    }
    
    void postorderHelper(TreeNode* node, vector<int>& result) {
        if (node) {
            postorderHelper(node->left, result);
            postorderHelper(node->right, result);
            result.push_back(node->val);
        }
    }
};